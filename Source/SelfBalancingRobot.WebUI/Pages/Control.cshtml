@page
@model SelfBalancingRobot.WebUI.Pages.ControlModel
@{
    ViewData["code"] = "CTRL";
    var mn = menuSettings.MenuList.Where(t => t.code == "CTRL").FirstOrDefault();
    ViewData["Title"] = mn?.description ?? "Control";
}
@section Head {
    <style type="text/css">
        iframe {
            width: 100%;
            min-height: 300px;
            border: none;
        }
    </style>
}

<div class="row">
    <div class="col-sm-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h4 class="card-title">Joystick</h4>
                <div>
                    <input id="cbCtrlEnable" type="checkbox" data-toggle="toggle" data-off="Disabled" data-on="Enabled" @(Model.JoystickEnabled ? "checked" : "") />
                </div>
            </div>
            <div class="card-body">
                <iframe id="frmJoy"></iframe>
            </div>
        </div>
    </div>

    <div class="col-sm-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h4 class="card-title">State</h4>
                <div>
                    <input id="cbArm" type="checkbox" data-toggle="toggle" data-off="Disarmed" data-on="Armed" data-onstyle="danger" data-offstyle="success" @(Model.Armed ? "checked" : "") />
                </div>
            </div>
            <div class="card-body">
                <fieldset disabled>
                    <div class="form-group">
                        <label for="tbFWD">FWD / REV</label>
                        <input type="text" id="tbFWD" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="tbLFTRGT">LFT / RGT</label>
                        <input type="text" id="tbLFTRGT" class="form-control" />
                    </div>
                </fieldset>
            </div>
        </div>
    </div>
</div>
@section Scripts {

    <script type="text/javascript">
        var joyX = 0.0;
        var joyY = 0.0;
        var ctrlEnableState = false;
        var armState = false;
        var RCTeleUpdate = null;
        var cons = null;
        function UpdateJoystick(x, y) {
            if (ctrlEnableState) {
                joyX = x;
                joyY = y;
            }
            else {
                joyX = 0.0;
                joyY = 0.0;
            }
            $('#tbFWD').val(joyY);
            $('#tbLFTRGT').val(joyX);
        }

        function sendRCData() {
            try {
                if (ctrlEnableState) {
                    cons.invoke("RCCommand", joyX, joyY);
                }
            } catch (e) {
                if (RCTeleUpdate)
                    clearInterval(RCTeleUpdate);
            }
        }
        function OnChangeArm() {
            armState = $("#cbArm").prop('checked');
            cons.invoke("ArmDisarm", armState);
        }
        $(function () {
            $("#frmJoy").attr("src", "/Joystick");
            $('#cbCtrlEnable').change(function () {
                ctrlEnableState = $("#cbCtrlEnable").prop('checked');
                cons.invoke("JoystickEnable", ctrlEnableState);
            });
            cons = new signalR.HubConnectionBuilder().withUrl("/ws/control").build();
            $('#cbArm').change(OnChangeArm);
            cons.start().then(function () {
                RCTeleUpdate = setInterval(sendRCData, 50);
                $('#cbCtrlEnable').trigger('change');
                $('#cbArm').trigger('change');
            }).catch(function (err) {
                return console.error(err.toString());
            });
        });
    </script>
}